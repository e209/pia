# This is 3proxy configuration file
# few $variables will be replaced by real values when container starts

daemon
pidfile $PIDFILE

# no 'nserver' command! default resolver means PIA nameservers specified in docker-compose file (then no leaks)

log /dev/null
logformat "L%Y-%m-%d %H:%M:%S %z | %N.%p %E %U %C:%c %R:%r %Q:%q %n %T"

internal $THIS_HOST_IP
external $THIS_HOST_IP

# absolutely necessary since we ban by with iptables all access besides 'local network' and 'docker bridge'! (this works only with chaining proxy)
fakeresolve

# Few words about how 3proxy deals with access permission rules in the conguration file.
# If we need, for example, to set up two access methods (unrestricted for local network and login/password for others) for the same
# service (socks, proxy and others), DO NOT create two separate ACL group for this (e.g. two set of commands divided by 'flush' with
# separate service command in each. 3proxy doesn't try to match a request with different ACL groups belonging to the same services from
# top to bottom in order how they listed in the config, instead 3proxy sorts requests and sends them to the several services of one type 
# at random. The result is that some requests by chance are checked against login/password, some not independently of source ip or similar.
# Instead of this create only one ACL group for each service (for examlple, only one 'socks' command per config) and set up several access
# rules ('allow', each immediately followed by 'parent' if needed, and 'deny') before service command.

users $LOGIN:CL:$PASSWORD

# using only one ACL group because permissions for the socks and proxy services are the same

auth iponly strong
allow * $LOCAL_NETWORK_IP/$LOCAL_NETWORK_MASK
parent 1000 socks5+ $PARENT_PROXY_IP 1080 
allow $LOGIN
parent 1000 socks5+ $PARENT_PROXY_IP 1080 

# these service command must follow ACL specifications related to it (be the last commands in the ACL group)
socks -p1080 
proxy -p3128

flush

end
